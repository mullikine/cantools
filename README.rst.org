[[https://travis-ci.org/eerimoq/cantools.svg?branch=master]]\_
[[https://ci.appveyor.com/api/projects/status/github/eerimoq/cantools?svg=true]]\_
[[https://coveralls.io/repos/github/eerimoq/cantools/badge.svg?branch=master]]\_

* About

CAN BUS tools in Python 3.

-  [[http://www.socialledge.com/sjsu/index.php?title=DBC_Format][DBC]],
   [[https://github.com/julietkilo/kcd][KCD]], SYM, ARXML 4 and CDD file
   parsing.
-  CAN message encoding and decoding.
-  Simple and extended signal multiplexing.
-  Diagnostic DID encoding and decoding.
-  =candump= output decoder.
-  Node
   [[http://cantools.readthedocs.io/en/latest/#cantools.tester.Tester][tester]].
-  C source code generator.
-  CAN bus monitor.

Python 2 support is deprecated as Python 3 has better unicode support.

Project homepage: [[https://github.com/eerimoq/cantools]]

Documentation: [[http://cantools.readthedocs.org/en/latest]]

* Installation

#+BEGIN_SRC python
    pip install cantools
#+END_SRC

* Example usage

** Scripting

The example starts by parsing a
[[https://github.com/eerimoq/cantools/blob/master/tests/files/dbc/motohawk.dbc][small
DBC-file]] and printing its messages and signals.

#+BEGIN_SRC python
    >>> import cantools
    >>> from pprint import pprint
    >>> db = cantools.database.load_file('tests/files/dbc/motohawk.dbc')
    >>> db.messages
    [message('ExampleMessage', 0x1f0, False, 8, 'Example message used as template in MotoHawk models.')]
    >>> example_message = db.get_message_by_name('ExampleMessage')
    >>> pprint(example_message.signals)
    [signal('Enable', 7, 1, 'big_endian', False, 1.0, 0, 0.0, 0.0, '-', False, None, {0: 'Disabled', 1: 'Enabled'}, None),
     signal('AverageRadius', 6, 6, 'big_endian', False, 0.1, 0, 0.0, 5.0, 'm', False, None, None, ''),
     signal('Temperature', 0, 12, 'big_endian', True, 0.01, 250, 229.53, 270.47, 'degK', False, None, None, None)]
#+END_SRC

The example continues
[[http://cantools.readthedocs.io/en/latest/#cantools.database.can.Message.encode][encoding]]
a message and sending it on a CAN bus using the
[[https://python-can.readthedocs.io/en/master/][python-can]] package.

#+BEGIN_SRC python
    >>> import can
    >>> can_bus = can.interface.Bus('vcan0', bustype='socketcan')
    >>> data = example_message.encode({'Temperature': 250.1, 'AverageRadius': 3.2, 'Enable': 1})
    >>> message = can.Message(arbitration_id=example_message.frame_id, data=data)
    >>> can_bus.send(message)
#+END_SRC

Alternatively, a message can be encoded using the
[[http://cantools.readthedocs.io/en/latest/#cantools.database.can.Database.encode_message][encode\_message()]]
method on the database object.

The last part of the example receives and
[[http://cantools.readthedocs.io/en/latest/#cantools.database.can.Database.decode_message][decodes]]
a CAN message.

#+BEGIN_SRC python
    >>> message = can_bus.recv()
    >>> db.decode_message(message.arbitration_id, message.data)
    {'AverageRadius': 3.2, 'Enable': 'Enabled', 'Temperature': 250.09}
#+END_SRC

See
[[https://github.com/eerimoq/cantools/blob/master/examples][examples]]
for additional examples.

** Command line tool

*** The decode subcommand

Decode CAN frames captured with the Linux program =candump=.

#+BEGIN_EXAMPLE
    $ candump vcan0 | cantools decode tests/files/dbc/motohawk.dbc
      vcan0  1F0   [8]  80 4A 0F 00 00 00 00 00 ::
    ExampleMessage(
        Enable: 'Enabled' -,
        AverageRadius: 0.0 m,
        Temperature: 255.92 degK
    )
      vcan0  1F0   [8]  80 4A 0F 00 00 00 00 00 ::
    ExampleMessage(
        Enable: 'Enabled' -,
        AverageRadius: 0.0 m,
        Temperature: 255.92 degK
    )
      vcan0  1F0   [8]  80 4A 0F 00 00 00 00 00 ::
    ExampleMessage(
        Enable: 'Enabled' -,
        AverageRadius: 0.0 m,
        Temperature: 255.92 degK
    )
#+END_EXAMPLE

Alternatively, the decoded message can be printed on a single line:

#+BEGIN_EXAMPLE
    $ candump vcan0 | cantools decode --single-line tests/files/dbc/motohawk.dbc
      vcan0  1F0   [8]  80 4A 0F 00 00 00 00 00 :: ExampleMessage(Enable: 'Enabled' -, AverageRadius: 0.0 m, Temperature: 255.92 degK)
      vcan0  1F0   [8]  80 4A 0F 00 00 00 00 00 :: ExampleMessage(Enable: 'Enabled' -, AverageRadius: 0.0 m, Temperature: 255.92 degK)
      vcan0  1F0   [8]  80 4A 0F 00 00 00 00 00 :: ExampleMessage(Enable: 'Enabled' -, AverageRadius: 0.0 m, Temperature: 255.92 degK)
#+END_EXAMPLE

*** The dump subcommand

Dump given database in a human readable format:

#+BEGIN_EXAMPLE
    $ cantools dump tests/files/dbc/motohawk.dbc
    ================================= Messages =================================

      ------------------------------------------------------------------------

      Name:       ExampleMessage
      Id:         0x1f0
      Length:     8 bytes
      Cycle time: - ms
      Senders:    PCM1
      Layout:

                              Bit

                 7   6   5   4   3   2   1   0
               +---+---+---+---+---+---+---+---+
             0 |<-x|<---------------------x|<--|
               +---+---+---+---+---+---+---+---+
                 |                       +-- AverageRadius
                 +-- Enable
               +---+---+---+---+---+---+---+---+
             1 |-------------------------------|
               +---+---+---+---+---+---+---+---+
             2 |----------x|   |   |   |   |   |
         B     +---+---+---+---+---+---+---+---+
         y               +-- Temperature
         t     +---+---+---+---+---+---+---+---+
         e   3 |   |   |   |   |   |   |   |   |
               +---+---+---+---+---+---+---+---+
             4 |   |   |   |   |   |   |   |   |
               +---+---+---+---+---+---+---+---+
             5 |   |   |   |   |   |   |   |   |
               +---+---+---+---+---+---+---+---+
             6 |   |   |   |   |   |   |   |   |
               +---+---+---+---+---+---+---+---+
             7 |   |   |   |   |   |   |   |   |
               +---+---+---+---+---+---+---+---+

      Signal tree:

        -- {root}
           +-- Enable
           +-- AverageRadius
           +-- Temperature

      Signal choices:

        Enable
            0 Disabled
            1 Enabled

      ------------------------------------------------------------------------
#+END_EXAMPLE

*** The generate C source subcommand

Generate C source code from given database.

The generated code contains:

-  Message
   [[https://github.com/eerimoq/cantools/blob/master/tests/files/c_source/motohawk.h#L58][structs]].
-  Message
   [[https://github.com/eerimoq/cantools/blob/master/tests/files/c_source/motohawk.h#L88][pack]]
   and
   [[https://github.com/eerimoq/cantools/blob/master/tests/files/c_source/motohawk.h#L102][unpack]]
   functions.
-  Signal
   [[https://github.com/eerimoq/cantools/blob/master/tests/files/c_source/motohawk.h#L116][encode]]
   and
   [[https://github.com/eerimoq/cantools/blob/master/tests/files/c_source/motohawk.h#L125][decode]]
   functions.
-  Frame id, length, type, cycle time and signal choices
   [[https://github.com/eerimoq/cantools/blob/master/tests/files/c_source/motohawk.h#L42][defines]].

Known limitations:

-  The maximum signal size is 64 bits, which in practice is never
   exceeded.

Below is an example of how to generate C source code from a database.
The database is =tests/files/dbc/motohawk.dbc=.

#+BEGIN_EXAMPLE
    $ cantools generate_c_source tests/files/dbc/motohawk.dbc
    Successfully generated motohawk.h and motohawk.c.
#+END_EXAMPLE

See
[[https://github.com/eerimoq/cantools/blob/master/tests/files/c_source/motohawk.h][motohawk.h]]
and
[[https://github.com/eerimoq/cantools/blob/master/tests/files/c_source/motohawk.c][motohawk.c]]
for the contents of the generated files.

In the next example we use =--database-name= to set a custom namespace
for all generated types, defines and functions. The output file names
are also changed by this option.

#+BEGIN_EXAMPLE
    $ cantools generate_c_source --database-name my_database_name tests/files/dbc/motohawk.dbc
    Successfully generated my_database_name.h and my_database_name.c.
#+END_EXAMPLE

See
[[https://github.com/eerimoq/cantools/blob/master/tests/files/c_source/my_database_name.h][my\_database\_name.h]]
and
[[https://github.com/eerimoq/cantools/blob/master/tests/files/c_source/my_database_name.c][my\_database\_name.c]]
for the contents of the generated files.

In the last example we use =--no-floating-point-numbers= to generate
code without floating point types, i.e. =float= and =double=.

#+BEGIN_EXAMPLE
    $ cantools generate_c_source --no-floating-point-numbers tests/files/dbc/motohawk.dbc
    Successfully generated motohawk.h and motohawk.c.
#+END_EXAMPLE

See
[[https://github.com/eerimoq/cantools/blob/master/tests/files/c_source/motohawk_no_floating_point_numbers.h][motohawk\_no\_floating\_point\_numbers.h]]
and
[[https://github.com/eerimoq/cantools/blob/master/tests/files/c_source/motohawk_no_floating_point_numbers.c][motohawk\_no\_floating\_point\_numbers.c]]
for the contents of the generated files.

Other C code generators:

-  [[http://www.coderdbc.com]]
-  [[https://github.com/howerj/dbcc]]
-  [[https://github.com/lonkamikaze/hsk-libs/blob/master/scripts/dbc2c.awk]]
-  [[https://sourceforge.net/projects/comframe/]]

*** The monitor subcommand

Monitor CAN bus traffic in a text based user interface.

#+BEGIN_EXAMPLE
    $ cantools monitor tests/files/dbc/motohawk.dbc
#+END_EXAMPLE

[[https://github.com/eerimoq/cantools/raw/master/docs/monitor.png]]

The menu at the bottom of the monitor shows the available commands.

-  Quit: Quit the monitor. Ctrl-C can be used as well.
-  Filter: Only display messages matching given regular expression.
   Press <Enter> to return to the menu from the filter input line.
-  Play/Pause: Toggle between playing and paused (or running and
   freezed).
-  Reset: Reset the monitor to its initial state.

* Contributing

1. Fork the repository.
2. Install prerequisites.

   #+BEGIN_EXAMPLE
       pip install -r requirements.txt
   #+END_EXAMPLE

3. Implement the new feature or bug fix.
4. Implement test case(s) to ensure that future changes do not break
   legacy.
5. Run the tests.

   #+BEGIN_EXAMPLE
       make test
   #+END_EXAMPLE

6. Create a pull request.
